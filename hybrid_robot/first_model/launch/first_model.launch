<launch>
    <!-- ==================================================== -->
    <!--
    By default, hide joint_state_publisher's GUI. The joint_state_publisher
    maintains and publishes the current joint configuration of the simulated robot.
    It also provides a GUI to move the simulated robot around "manually".
    -->
    <!-- ==================================================== -->
    <arg name="use_gui" default="false"/>

    <!-- ==================================================== -->
    <!-- Gazebo specific options                              -->
    <!-- ==================================================== -->
    <arg name="gazebo_gui" default="true"/>
    <arg name="paused" default="true"/>

    <!-- ==================================================== -->
    <!-- Launch Gazebo with a world                           -->
    <!-- ==================================================== -->
    <!-- Startup simulated world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find hybrid_robot)/first_model/world/world.world"/>
        <arg name="verbose" value="true"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="gui" value="$(arg gazebo_gui)"/>
    </include>

    <!-- ==================================================== -->
    <!-- Send robot urdf to param server                      -->
    <!-- ==================================================== -->
    <param name="robot_description"
        command="$(find xacro)/xacro '$(find hybrid_robot)/first_model/urdf/first_model.urdf.xacro' use_gazebo_sim:=true"/>

    <!-- ==================================================== -->
    <!-- Spawn robot in Gazebo                                -->
    <!-- ==================================================== -->
    <!-- Push robot_description to factory and spawn robot in gazebo at the origin, change x,y,z arguments to spawn in a different position -->
    <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model hybrid_robot -z 1 -unpause"
        respawn="false" output="screen" />

<!--      --><!-- Load joint controller configurations from YAML file to parameter server -->
<!--     <rosparam file="$(find first_model_control)/config/ros_controllers.yaml" command="load"/> -->

<!--      --><!-- load the controllers -->
<!--     <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" -->
<!--         output="screen" ns="/hybrid_robot" args="prismatic_controller front_right_controller front_left_controller back_right_controller back_left_controller"/> -->

<!--      --><!-- convert joint states to TF transforms for rviz, etc -->
<!--     <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" -->
<!--         respawn="false" output="screen"> -->
<!--         <remap from="/joint_states" to="/hybrid_robot/joint_states" /> -->
<!--     </node> -->

    <!-- Load joint controller configurations from YAML file to parameter server -->
      <rosparam file="$(find first_control)/config/controllers.yaml" command="load"/>

      <!-- load the controllers -->
      <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/rrbot" args="prismatic_controller front_right_controller front_left_controller back_right_controller
        back_left_controller joint_state_controller"/>

      <!-- convert joint states to TF transforms for rviz, etc -->
      <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
        <remap from="/joint_states" to="/hybrid_robot/joint_states" />
      </node>

</launch>